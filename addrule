#!/bin/bash

rm -f addrule.py
cat > addrule.py <<EOF
import sqlite3
import re
import json
import random
import string
import os
import subprocess

conn = sqlite3.connect('/etc/x-ui/x-ui.db')
cursor = conn.cursor()

cursor.execute("SELECT port, protocol FROM inbounds")
occupied_ports = {(port, protocol) for port, protocol in cursor.fetchall()}

def append_to_log(message):
    with open('results.log', 'a') as log_file:
        log_file.write(message + '\n')

def generate_password():
    return os.urandom(16).hex()

def generate_user_pass():
    user = ''.join(random.choices(string.digits, k=10))
    passw = ''.join(random.choices(string.digits, k=10))
    return user, passw

def add_ss_rule(ip, total_value, base_port):
    client_password = ''.join(random.choice(string.digits) for _ in range(6))
    port = base_port
    while (port,) in cursor.execute("SELECT port FROM inbounds").fetchall():
        port += 1
    settings = {
        "method": "aes-256-gcm",
        "password": generate_password(),
        "network": "tcp,udp",
        "clients": [{
            "method": "aes-256-gcm",
            "password": client_password,
            "email": "123456",
            "limitIp": 0,
            "totalGB": 0,
            "expiryTime": 0,
            "enable": True,
            "tgId": "",
            "subId": "b71ptomlzsvjf8h9",
            "reset": 0
        }]
    }
    inbound = {
        "user_id": 1,
        "up": 0,
        "down": 0,
        "total": total_value,
        "remark": ip,
        "enable": 1,
        "expiry_time": 0,
        "listen": ip,
        "port": port,
        "protocol": "shadowsocks",
        "settings": json.dumps(settings),
        "stream_settings": json.dumps({"network": "tcp", "security": "none"}),
        "tag": f"inbound-ip:{ip}:{port}",
        "sniffing": json.dumps({"enabled": True, "destOverride": ["http", "tls", "quic", "fakedns"]}),
        "allocate": json.dumps({"strategy": "always", "refresh": 5, "concurrency": 3})
    }
    cursor.execute("""
        INSERT INTO inbounds (user_id, up, down, total, remark, enable, expiry_time, listen, port, protocol, settings, stream_settings, tag, sniffing, allocate)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        """, (
        inbound["user_id"], inbound["up"], inbound["down"], inbound["total"], inbound["remark"],
        inbound["enable"], inbound["expiry_time"], inbound["listen"], inbound["port"],
        inbound["protocol"], inbound["settings"], inbound["stream_settings"], inbound["tag"],
        inbound["sniffing"], inbound["allocate"]
    ))
    append_to_log(f'{ip}:{port} ss配置的 客户邮箱为123456，密码为 {client_password}')
    return port

def add_sk_rule(ip, total_value, base_port):
    user, passw = generate_user_pass()
    port = base_port
    while (port,) in cursor.execute("SELECT port FROM inbounds").fetchall():
        port += 1
    settings = {
        "auth": "password",
        "accounts": [{"user": user, "pass": passw}],
        "udp": True,
        "ip": "127.0.0.1"
    }
    inbound = {
        "user_id": 1,
        "up": 0,
        "down": 0,
        "total": total_value,
        "remark": '',
        "enable": 1,
        "expiry_time": 0,
        "listen": ip,
        "port": port,
        "protocol": "socks",
        "settings": json.dumps(settings),
        "stream_settings": json.dumps({"network": "tcp", "security": "none"}),
        "tag": f"inbound-{ip}:{port}",
        "sniffing": json.dumps({"enabled": True, "destOverride": ["http", "tls", "quic", "fakedns"]}),
        "allocate": json.dumps({"strategy": "always", "refresh": 5, "concurrency": 3})
    }
    cursor.execute("""
        INSERT INTO inbounds (user_id, up, down, total, remark, enable, expiry_time, listen, port, protocol, settings, stream_settings, tag, sniffing, allocate)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        """, (
        inbound["user_id"], inbound["up"], inbound["down"], inbound["total"], inbound["remark"],
        inbound["enable"], inbound["expiry_time"], inbound["listen"], inbound["port"],
        inbound["protocol"], inbound["settings"], inbound["stream_settings"], inbound["tag"],
        inbound["sniffing"], inbound["allocate"]
    ))
    append_to_log(f'{ip}:{port} sk配置的用户名：{user}, 密码：{passw}')
    return port

    
def get_local_ips():
    ip_output = subprocess.check_output(['hostname', '-I'], text=True).strip()
    return ip_output.split()

def get_xray_template_config():
    cursor.execute("SELECT value FROM settings WHERE id=42 AND key='xrayTemplateConfig'")
    result = cursor.fetchone()
    if result:
        return json.loads(result[0])
    return None

def get_xray_template_config():
    cursor.execute("SELECT value FROM settings WHERE id=42 AND key='xrayTemplateConfig'")
    result = cursor.fetchone()
    if result:
        return json.loads(result[0])
    return None

def update_route_rules(template_config, new_tags):
    if not template_config:
        print("未找到现有的xray模板配置")
        return

    routing_rules = template_config.get("routing", {}).get("rules", [])
    
    # 更新rules，只添加对应的ip的tag
    for rule in routing_rules:
        if "inboundTag" in rule:
            for new_tag in new_tags:
                if new_tag not in rule["inboundTag"]:
                    rule["inboundTag"].append(new_tag)

    # 将更新后的配置写回数据库
    updated_config = json.dumps(template_config, ensure_ascii=False)
    cursor.execute("UPDATE settings SET value=? WHERE id=42 AND key='xrayTemplateConfig'", (updated_config,))
    conn.commit()
    print("路由规则已更新")

def add_new_tags_to_route(inbound_tags_by_ip):
    template_config = get_xray_template_config()
    if template_config is None:
        print("未找到现有的xray模板配置")
        return
    
    # 获取现有的所有tags
    existing_tags = {item for sublist in [rule.get("inboundTag", []) for rule in template_config["routing"]["rules"]] for item in sublist}

    # 更新rules，只添加对应的ip的tag
    for rule in template_config["routing"]["rules"]:
        rule_tags = set(rule.get("inboundTag", []))
        new_tags_for_rule = set()
        for ip, tags in inbound_tags_by_ip.items():
            if any(tag.startswith(f"inbound-{ip}:") for tag in tags):
                new_tags_for_rule.update(tags)
        new_tags_for_rule = new_tags_for_rule - existing_tags
        if new_tags_for_rule:
            rule_tags.update(new_tags_for_rule)
            rule["inboundTag"] = list(rule_tags)

    # 将更新后的配置写回数据库
    updated_config = json.dumps(template_config, ensure_ascii=False)
    cursor.execute("UPDATE settings SET value=? WHERE id=42 AND key='xrayTemplateConfig'", (updated_config,))
    conn.commit()
    print("路由规则已更新")

options = {
    '1': '批量添加新的规则（ss和sk）',
    '2': '批量添加新的ss规则',
    '3': '批量添加新的sk规则',
    '4': '单个添加规则',
    '0': '退出程序'
}

def main_menu():
    while True:
        print("请选择一个选项：")
        for key, value in options.items():
            print(f"{key}. {value}")
        choice = input("请输入选项编号：")
        if choice == '0':
            print("退出程序...")
            break
        elif choice in options:
            total_g = input("请输入新的规则的流量大小（请以G为单位，1024进制）: ").strip().upper()
            match = re.match(r'(\d+)(G)$', total_g)
            if not match:
                print("输入格式错误，请以G为结尾")
                continue
            total_value = int(match.group(1)) * 1073741824

            if choice == '4':
                ip = input("请输入要添加规则的IP地址：")
                if not ip:
                    ips = get_local_ips()
                    print(f"可用的IP地址有：{', '.join(ips)}")
                    continue
                else:
                    ss_or_sk = input("请输入要添加的规则类型（ss或sk）：").lower()
                    if ss_or_sk == 'ss':
                        new_port_ss = add_ss_rule(ip, total_value, 20000)
                        new_tags = [f"inbound-ip:{ip}:{new_port_ss}"]
                    elif ss_or_sk == 'sk':
                        new_port_sk = add_sk_rule(ip, total_value, 50000)
                        new_tags = [f"inbound-{ip}:{new_port_sk}"]
                    added_count = 1
                    add_new_tags_to_route(new_tags)
            else:
                ips = get_local_ips()
                added_count = 0
                new_tags = {ip: [] for ip in ips}
                if choice == '1':
                    base_port_ss = 20000
                    base_port_sk = 50000
                    for ip in ips:
                        new_port_ss = add_ss_rule(ip, total_value, base_port_ss)
                        new_port_sk = add_sk_rule(ip, total_value, base_port_sk)
                        new_tags[ip].append(f"inbound-ip:{ip}:{new_port_ss}")
                        new_tags[ip].append(f"inbound-{ip}:{new_port_sk}")
                        base_port_ss = new_port_ss + 1
                        base_port_sk = new_port_sk + 1
                        added_count += 2
                elif choice == '2':
                    base_port_ss = 20000
                    for ip in ips:
                        new_port_ss = add_ss_rule(ip, total_value, base_port_ss)
                        new_tags[ip].append(f"inbound-ip:{ip}:{new_port_ss}")
                        base_port_ss = new_port_ss + 1
                        added_count += 1
                elif choice == '3':
                    base_port_sk = 50000
                    for ip in ips:
                        new_port_sk = add_sk_rule(ip, total_value, base_port_sk)
                        new_tags[ip].append(f"inbound-{ip}:{new_port_sk}")
                        base_port_sk = new_port_sk + 1
                        added_count += 1
                add_new_tags_to_route(new_tags)

            conn.commit()
            print(f'已成功将 {added_count} 条规则写入数据库。')
        else:
            print("无效的选项，请重新输入！")

if __name__ == "__main__":
    main_menu()
    conn.close()

EOF

x-ui stop
if [ $? -ne 0 ]; then
    echo "未能停止x-ui或者权限不足"
fi
python3 addrule.py
if [ $? -ne 0 ]; then
    echo "脚本执行失败"
    rm -f addrule.py
    exit 1
fi

rm -f addrule.py
x-ui start

