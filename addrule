#!/bin/bash

rm -f addrule.py
cat > addrule.py <<EOF

import sqlite3
import re
import json
import random
import string
import os

conn = sqlite3.connect('/etc/x-ui/x-ui.db')
cursor = conn.cursor()

cursor.execute("SELECT port, protocol FROM inbounds")
occupied_ports = {(port, protocol) for port, protocol in cursor.fetchall()}

def append_to_log(message):
    with open('results.log', 'a') as log_file:
        log_file.write(message + '\n')

def generate_password():
    return os.urandom(16).hex()

def generate_user_pass():
    user = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    passw = ''.join(random.choices(string.digits, k=10))
    return user, passw

def add_ss_rule(ip, total_value, base_port):
    client_password = ''.join(random.choice(string.digits) for _ in range(6))
    port = base_port
    while (port, 'ss') in occupied_ports or not str(port).startswith('2'):
        port += 1
    settings = {
        "method": "aes-256-gcm",
        "password": generate_password(),
        "network": "tcp,udp",
        "clients": [{
            "method": "aes-256-gcm",
            "password": client_password,
            "email": "123456",
            "limitIp": 0,
            "totalGB": 0,
            "expiryTime": 0,
            "enable": True,
            "tgId": "",
            "subId": "b71ptomlzsvjf8h9",
            "reset": 0
        }]
    }
    inbound = {
        "user_id": 1,
        "up": 0,
        "down": 0,
        "total": total_value,
        "remark": ip,
        "enable": 1,
        "expiry_time": 0,
        "listen": ip,
        "port": port,
        "protocol": "shadowsocks",
        "settings": json.dumps(settings),
        "stream_settings": json.dumps({"network": "tcp", "security": "none"}),
        "tag": f"inbound-ip:{ip}:{port}",
        "sniffing": json.dumps({"enabled": True, "destOverride": ["http", "tls", "quic", "fakedns"]}),
        "allocate": json.dumps({"strategy": "always", "refresh": 5, "concurrency": 3})
    }
    cursor.execute("""
        INSERT INTO inbounds (user_id, up, down, total, remark, enable, expiry_time, listen, port, protocol, settings, stream_settings, tag, sniffing, allocate)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        """, (
        inbound["user_id"], inbound["up"], inbound["down"], inbound["total"], inbound["remark"],
        inbound["enable"], inbound["expiry_time"], inbound["listen"], inbound["port"],
        inbound["protocol"], inbound["settings"], inbound["stream_settings"], inbound["tag"],
        inbound["sniffing"], inbound["allocate"]
    ))
    append_to_log(f'{ip}:{port} ss配置的 客户邮箱为123456，密码为 {client_password}')
    return port

def add_sk_rule(ip, total_value, base_port):
    user, passw = generate_user_pass()
    port = base_port
    while (port, 'sk') in occupied_ports or not str(port).startswith('5'):
        port += 1
    settings = {
        "auth": "password",
        "accounts": [{"user": user, "pass": passw}],
        "udp": True,
        "ip": "127.0.0.1"
    }
    inbound = {
        "user_id": 1,
        "up": 0,
        "down": 0,
        "total": total_value,
        "remark": '',
        "enable": 1,
        "expiry_time": 0,
        "listen": ip,
        "port": port,
        "protocol": "socks",
        "settings": json.dumps(settings),
        "stream_settings": json.dumps({"network": "tcp", "security": "none"}),
        "tag": f"inbound-{ip}:{port}",
        "sniffing": json.dumps({"enabled": True, "destOverride": ["http", "tls", "quic", "fakedns"]}),
        "allocate": json.dumps({"strategy": "always", "refresh": 5, "concurrency": 3})
    }
    cursor.execute("""
        INSERT INTO inbounds (user_id, up, down, total, remark, enable, expiry_time, listen, port, protocol, settings, stream_settings, tag, sniffing, allocate)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
        """, (
        inbound["user_id"], inbound["up"], inbound["down"], inbound["total"], inbound["remark"],
        inbound["enable"], inbound["expiry_time"], inbound["listen"], inbound["port"],
        inbound["protocol"], inbound["settings"], inbound["stream_settings"], inbound["tag"],
        inbound["sniffing"], inbound["allocate"]
    ))
    append_to_log(f'{ip}:{port} sk配置的用户名：{user}, 密码：{passw}')
    return port


options = {
    '1': '批量添加新的规则（ss和sk）',
    '2': '批量添加新的ss规则',
    '3': '批量添加新的sk规则',
    '4': '单个添加规则'
}

print("请选择一个选项：")
for key, value in options.items():
    print(f"{key}. {value}")

choice = input("请输入选项编号：")

if choice in options:
    total_g = input("请输入新的规则的流量大小（请以G为单位，1024进制）: ").strip().upper()
    match = re.match(r'(\d+)(G)$', total_g)
    if not match:
        print("输入格式错误，请以G为结尾")
        exit()
    total_value = int(match.group(1)) * 1073741824

    ips = [ip for ip, _ in occupied_ports] 
    if choice == '1':
        base_port_ss = 20000
        base_port_sk = 50000
        for ip in ips:
            add_ss_rule(ip, total_value, base_port_ss)
            add_sk_rule(ip, total_value, base_port_sk)
            base_port_ss += 1
            base_port_sk += 1
    elif choice == '2':
        base_port_ss = 20000
        for ip in ips:
            add_ss_rule(ip, total_value, base_port_ss)
            base_port_ss += 1
    elif choice == '3':
        base_port_sk = 50000
        for ip in ips:
            add_sk_rule(ip, total_value, base_port_sk)
            base_port_sk += 1
    elif choice == '4':
        ss_or_sk = input("请输入要添加的规则类型（ss或sk）：")
        if ss_or_sk.lower() == 'ss':
            base_port = 20000
            add_ss_rule(ips[0], total_value, base_port)
        elif ss_or_sk.lower() == 'sk':
            base_port = 50000
            add_sk_rule(ips[0], total_value, base_port)
        else:
            print("无效的规则类型")
else:
    print("无效的选项")

conn.commit()
print(f'已成功将 {cursor.rowcount} 条规则写入数据库。')
conn.close()
EOF

x-ui stop
if [ $? -ne 0 ]; then
    echo "未能停止x-ui或者权限不足"
fi
python3 addrule.py
if [ $? -ne 0 ]; then
    echo "脚本执行失败"
    rm -f addrule.py
    exit 1
fi

rm -f addrule.py
x-ui start

