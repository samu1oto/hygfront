#!/bin/bash

rm -f changeport.py
cat > changeport.py <<EOF
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import sqlite3
import os

db_path = '/etc/x-ui/x-ui.db'
if not os.path.exists(db_path):
    print("未找到数据库，请先执行安装.")
    exit()

conn = sqlite3.connect(db_path)
cursor = conn.cursor()

ip = input("请输入要修改端口IP地址（仅支持ipv4地址）： ")

cursor.execute("SELECT id, listen, port, protocol FROM inbounds WHERE listen=?", (ip,))
inbounds = cursor.fetchall()

if not inbounds:
    print("未找到关于这个ip的配置")
    conn.close()
    exit()

cursor.execute("SELECT value FROM settings WHERE key='xrayTemplateConfig' AND id=42")
config_row = cursor.fetchone()
if not config_row:
    print("找不到配置模板，请重新安装面板")
    conn.close()
    exit()

with open('change.json', 'w') as f:
    f.write(config_row[0])

with open('change.json', 'r') as f:
    config = json.load(f)
rules = config["routing"]["rules"]

ss_port_changed = False
sk5_port_changed = False
new_ss_port = None
new_sk5_port = None

for inbound in inbounds:
    inbound_id, listen, port, protocol = inbound
    if protocol == "shadowsocks":
        new_port = input(f"请输入 {ip}:{port} 的新SS端口：（无需修改请直接回车） ").strip()
        if new_port:
            new_port = int(new_port)
            cursor.execute("UPDATE inbounds SET port=? WHERE id=?", (new_port, inbound_id))
            conn.commit()
            print(f"{ip} SS端口 {port} 已经更改为{new_port}")
            ss_port_changed = True
            new_ss_port = new_port
            old_ss_port = port

    elif protocol == "socks":
        new_port = input(f"请输入 {ip}:{port} 的新SK5端口：（无需修改请直接回车）  ").strip()
        if new_port:
            new_port = int(new_port)
            cursor.execute("UPDATE inbounds SET port=? WHERE id=?", (new_port, inbound_id))
            conn.commit()
            print(f"{ip} SK5端口 {port} 已经更改为{new_port}")
            sk5_port_changed = True
            new_sk5_port = new_port
            old_sk5_port = port

#if ss_port_changed:
#    for rule in rules:
#        for index, tag in enumerate(rule.get("inboundTag", [])):
#            if tag.startswith(f"inbound-ip:{ip}"):
#                rule["inboundTag"][index] = f"inbound-ip:{ip}:{new_ss_port}"

#if sk5_port_changed:
#    for rule in rules:
#        for index, tag in enumerate(rule.get("inboundTag", [])):
#            if tag.startswith(f"inbound-{ip}"):
#                rule["inboundTag"][index] = f"inbound-{ip}:{new_sk5_port}"

#with open('change.json', 'w') as f:
#    json.dump(config, f, indent=4)

#cursor.execute("UPDATE settings SET value=? WHERE id=42 AND key='xrayTemplateConfig'", (open('change.json', 'r').read(),))
#conn.commit()

# Delete change.json
#os.remove('change.json')

print("新的修改已经应用到数据库")
conn.close()
EOF

x-ui stop
if [ $? -ne 0 ]; then
    echo "未能停止x-ui或x-ui已经停止。如出错再继续排查"
fi
python3 changeport.py
if [ $? -ne 0 ]; then
    echo "脚本执行失败"
    rm -f changeport.py
    exit 1
fi

rm -f changeport.py
x-ui start
