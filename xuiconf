#!/bin/bash  

echo "清理未被清理的文件"
rm -f genroute.py
rm -f genoutbound.py
rm -f gensec.py
rm -f temp.db
rm -f writetemple.py
rm -r route.json
rm -r rules.json
rm -r outbound.json
sleep 1
clear




echo "正在检测环境并安装依赖，请稍候"
#获取OS和发行版数据
if [ -f /etc/os-release ]; then
    . /etc/os-release
    echo "成功获取到OS： $NAME"
else
    echo "脚本并没有成功检测到您使用的OS"
    read -p "是否继续运行？(y/n): " continue_flag_os
    if ["$continue_flag_os" != "y"]; then
        echo "Aborted"
        exit 1
    fi
fi

#安装python3
case "$ID" in
    ubuntu|debian)
        apt-get update
        apt-get install -y python3 xxd
        ;;
    centos)
        yum update
        yum install -y python3 xxd
        ;;
    fedora)
        dnf update
        dnf install -y python3 xxd
        ;;
    *)
        echo "脚本未适配您使用的OS，您依旧可以选择继续运行，但您需要保证您已经正确安装python3"
        read -p "是否继续运行？(y/n): " continue_flag_base
        if ["$continue_flag_base" != "y"]; then
            echo "Aborted"
            exit 1
        fi
        ;;
esac

#部署并启动xui
clear

if [ -e "/etc/systemd/system/x-ui.service" ]; then
    read -p "您已经部署过x-ui，为保证能够正常运作，将进行卸载"
    yes | x-ui uninstall
else
    echo "未部署x-ui，将部署x-ui面板并自动配置"
    sleep 1
   #bash <(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)
fi
    
MAX_RETRIES=3
retry_count=0

while [ $retry_count -lt $MAX_RETRIES ]
do

    if echo "n" | bash <(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh); then
        break
    else
        let retry_count++
    fi
done

if [ $retry_count -eq $MAX_RETRIES ]; then
    echo "脚本执行失败，建议联系脚本提供者"
    read -p "是否重试？(y/n): " answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        echo "正在重试..."
        retry_count=0
        echo "n" | bash <(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)
    else
        echo "Aborted"
    fi
fi

#配置密钥，写入并输出
sleep 1
echo "正在写出必须文件"
sleep 2
cat > genoutbound.py <<EOF
import subprocess  
import json  
  
try:  
    ip_output = subprocess.check_output(['hostname', '-I'], text=True).strip()  
    ips = ip_output.split()  

    json_data = []  
    for ip in ips:  
        json_data.append({  
            "tag": ip,
            "protocol": "freedom",  
            "settings": {  
                "domainStrategy": "UseIP",  
                "redirect": "",  
                "noises": []  
            },  
            "sendThrough": ip
        }) 
  

    with open('outbound.json', 'w') as f:  
        json.dump(json_data, f, indent=4)  
  
except subprocess.CalledProcessError as e:  

    print(f"Error executing hostname -I: {e}")  
except Exception as e:  
 
    print(f"An error occurred: {e}")
EOF

cat > genroute.py <<EOF
import subprocess  
import json  
  
try:  
    ip_output = subprocess.check_output(['hostname', '-I']).decode('utf-8').strip()  
    ips = ip_output.split()  
  
    json_list = [  
        {  
            "type": "field",  
            "inboundTag": ["api"],  
            "outboundTag": "api"  
        },  
        {  
            "type": "field",  
            "outboundTag": "blocked",  
            "ip": ["geoip:private"]  
        },  
        {  
            "type": "field",  
            "outboundTag": "blocked",  
            "protocol": ["bittorrent"]  
        }  
    ]  
  

    ss_base_port = 20000
    sk5_base_port = 50000
    for ip in ips:

        json_obj = {
            "type": "field",
            "network": "TCP,UDP",
            "inboundTag": ["inbound-ip:{}:{}".format(ip,ss_base_port),"inbound-{}:{}".format(ip,sk5_base_port)],
            "outboundTag": ip
        }
        ss_base_port +=1
        sk5_base_port += 1
        json_list.append(json_obj)

    
    with open('route.json', 'w') as f:  
        json.dump(json_list, f, indent=2, ensure_ascii=False)  
  
#错误跟踪
except subprocess.CalledProcessError as e:  
    print(f"Error getting hostname: {e}")  
except Exception as e:  
    print(f"An error occurred: {e}")
EOF
cat > gensec.py <<EOF
import subprocess
import json
import os
import re
import sqlite3
import random
import string
import time


ip_output = subprocess.check_output(['hostname', '-I']).decode('utf-8').strip()
ips = ip_output.split()

def generate_password():
    return os.urandom(16).hex()

def generate_user_pass():
    return ''.join(random.choices(string.digits, k=10)), ''.join(random.choices(string.digits, k=10))

base_port1 = 20000
base_port2 = 50000

inbounds = []

with open('results.log', 'w') as results_file:  
    all_same_traffic = input("是否为每个IP单独设置流量？(y/n): ").strip().lower()
    if all_same_traffic == 'n':
        total_g = input("请输入所有IP的可用流量（请以G为单位，1024进制）: ").strip().upper()
        match = re.match(r'(\d+)(G)$', total_g)
        if match:
            total_value = int(match.group(1)) * 1073741824
        else:
            print("输入格式错误，请以G为结尾")
            exit()
        total_values = {ip: total_value for ip in ips}
    else:
        total_values = {}
        for ip in ips:
            while True:
                total_g = input(f"请输入 IP {ip} 的可用流量（请以G为单位，1024进制）: ").strip().upper()
                match = re.match(r'(\d+)(G)$', total_g)
                if match:
                    total_values[ip] = int(match.group(1)) * 1073741824
                    break  # 如果匹配成功，跳出外部循环
                else:
                    print("输入格式错误，请以G为结尾")
                    time.sleep(1)

    for ip in ips:
        total_value = total_values[ip]

        client_password = ''.join(random.choice(string.digits) for _ in range(6))

        port = base_port1
        for _ in range(1):  
            inbound = {
                "id": None,
                "user_id": 1, 
                "up": 0,
                "down": 0,
                "total": total_value,
                "remark": ip,
                "enable": 1,
                "expiry_time": 0,
                "listen": ip,
                "port": port,
                "protocol": "shadowsocks",
                "settings": json.dumps({
                    "method": "aes-256-gcm",
                    "password": generate_password(),
                    "network": "tcp,udp",
                    "clients": [
                        {
                            "method": "aes-256-gcm",
                            "password": client_password,
                            "email": "123456",
                            "limitIp": 0,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": True,
                            "tgId": "",
                            "subId": "b71ptomlzsvjf8h9",
                            "reset": 0
                        }
                    ]
                }),
                "stream_settings": json.dumps({
                    "network": "tcp",
                    "security": "none",
                    "externalProxy": [],
                    "tcpSettings": {
                        "acceptProxyProtocol": False,
                        "header": {
                            "type": "none"
                        }
                    }
                }),
                "tag": f"inbound-ip:{ip}:{port}",
                "sniffing": json.dumps({
                    "enabled": True,
                    "destOverride": ["http", "tls", "quic", "fakedns"],
                    "metadataOnly": False,
                    "routeOnly": False
                }),
                "allocate": json.dumps({
                    "strategy": "always",
                    "refresh": 5,
                    "concurrency": 3
                })
            }
            inbounds.append(inbound)

            print(f'{ip}:{port} ss配置的 客户邮箱为123456，密码为', client_password , file=results_file)
            base_port1 += 1
            port = base_port1 

        port = base_port2
        for _ in range(1):  
            user, passw = generate_user_pass()
            inbound = {
                "id": None, 
                "user_id": 1,  
                "up": 0,
                "down": 0,
                "total": total_value,
                "remark": '',
                "enable": 1,
                "expiry_time": 0,
                "listen": ip,  # 固定的监听端口
                "port": port,
                "protocol": "socks",
                "settings": json.dumps({
                    "auth": "password",
                    "accounts": [
                        {
                            "user": user,
                            "pass": passw
                        }
                    ],
                    "udp": True,
                    "ip": "127.0.0.1"
                }),
                "stream_settings": json.dumps({
                    "network": "tcp",
                    "security": "none",
                    "externalProxy": [],
                    "tcpSettings": {
                        "acceptProxyProtocol": False,
                        "header": {
                            "type": "none"
                        }
                    }
                }),
                "tag": f"inbound-{ip}:{port}",
                "sniffing": json.dumps({
                    "enabled": True,
                    "destOverride": ["http", "tls", "quic", "fakedns"],
                    "metadataOnly": False,
                    "routeOnly": False
                }),
                "allocate": json.dumps({
                    "strategy": "always",
                    "refresh": 5,
                    "concurrency": 3
                })
            }
            inbounds.append(inbound)
            print(f'{ip}:{port} sk配置的用户名：{user}, 密码：{passw}', file=results_file)
            base_port2 += 1
            port = base_port2  

    conn = sqlite3.connect('temp.db')
    cursor = conn.cursor()

    sql = '''
    INSERT INTO inbounds (user_id, up, down, total, remark, enable, expiry_time, listen, port, protocol, settings, stream_settings, tag, sniffing, allocate)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
    '''

    # 插入数据
    for inbound in inbounds:
        cursor.execute(sql, (
            inbound["user_id"],
            inbound["up"],
            inbound["down"],
            inbound["total"],
            inbound["remark"],
            inbound["enable"],
            inbound["expiry_time"],
            inbound["listen"],
            inbound["port"],
            inbound["protocol"],
            inbound["settings"],
            inbound["stream_settings"],
            inbound["tag"],
            inbound["sniffing"],
            inbound["allocate"]
        ))
    conn.commit()
    conn.close()
    print(f'已成功将 {len(inbounds)} 条规则写入数据库。', file=results_file)

    print(f'如有需要您也可自行前往https://{ip}:2053管理，用户名和密码均为admin', file=results_file)
EOF
cat > writetemple.py <<EOF
import sqlite3
import json

with open('outbound.json', 'r') as file:
    outbounds = json.load(file)

with open('route.json', 'r') as file:
    rules = json.load(file)


config = {
    "log": {
        "access": "none",
        "dnsLog": False,
        "error": "",
        "loglevel": "warning",
        "maskAddress": ""
    },
    "api": {
        "tag": "api",
        "services": [
            "HandlerService",
            "LoggerService",
            "StatsService"
        ]
    },
    "inbounds": [
        {
            "tag": "api",
            "listen": "127.0.0.1",
            "port": 62789,
            "protocol": "dokodemo-door",
            "settings": {
                "address": "127.0.0.1"
            }
        }
    ],
    "outbounds": outbounds,
    "policy": {
        "levels": {
            "0": {
                "statsUserDownlink": True,
                "statsUserUplink": True
            }
        },
        "system": {
            "statsInboundDownlink": True,
            "statsInboundUplink": True,
            "statsOutboundDownlink": True,
            "statsOutboundUplink": True
        }
    },
    "routing": {
        "domainStrategy": "AsIs",
        "rules": rules
    },
    "stats": {}
}


with open('rules.json', 'w') as file:
    json.dump(config, file, indent=2, ensure_ascii=False)

conn = sqlite3.connect('temp.db')
cursor = conn.cursor()


json_content = json.dumps(config)


cursor.execute("UPDATE settings SET value=? WHERE id=42 AND key='xrayTemplateConfig'", (json_content,))
conn.commit()
conn.close()
EOF
cat > temp.sql <<EOF
BEGIN TRANSACTION;
CREATE TABLE `client_traffics` (`id` integer PRIMARY KEY AUTOINCREMENT,`inbound_id` integer,`enable` numeric,`email` text,`up` integer,`down` integer,`expiry_time` integer,`total` integer,`reset` integer DEFAULT 0,CONSTRAINT `fk_inbounds_client_stats` FOREIGN KEY (`inbound_id`) REFERENCES `inbounds`(`id`),CONSTRAINT `uni_client_traffics_email` UNIQUE (`email`));
INSERT INTO "client_traffics" VALUES(2,2,1,'123456',519,6798,0,0,0);
INSERT INTO "client_traffics" VALUES(3,3,1,'ns6431ff',519,6798,0,0,0);
CREATE TABLE `inbound_client_ips` (`id` integer PRIMARY KEY AUTOINCREMENT,`client_email` text,`ips` text,CONSTRAINT `uni_inbound_client_ips_client_email` UNIQUE (`client_email`));
CREATE TABLE `inbounds` (`id` integer PRIMARY KEY AUTOINCREMENT,`user_id` integer,`up` integer,`down` integer,`total` integer,`remark` text,`enable` numeric,`expiry_time` integer,`listen` text,`port` integer,`protocol` text,`settings` text,`stream_settings` text,`tag` text,`sniffing` text,`allocate` text,CONSTRAINT `uni_inbounds_tag` UNIQUE (`tag`));
CREATE TABLE `outbound_traffics` (`id` integer PRIMARY KEY AUTOINCREMENT,`tag` text,`up` integer DEFAULT 0,`down` integer DEFAULT 0,`total` integer DEFAULT 0,CONSTRAINT `uni_outbound_traffics_tag` UNIQUE (`tag`));
CREATE TABLE `settings` (`id` integer PRIMARY KEY AUTOINCREMENT,`key` text,`value` text);
INSERT INTO "settings" VALUES(1,'webBasePath','/');
INSERT INTO "settings" VALUES(2,'secret','FIVcpxobetp8Pv5MswS0L43kt70UHTG8');
INSERT INTO "settings" VALUES(3,'webListen','');
INSERT INTO "settings" VALUES(4,'webDomain','');
INSERT INTO "settings" VALUES(5,'webPort','2053');
INSERT INTO "settings" VALUES(6,'webCertFile','');
INSERT INTO "settings" VALUES(7,'webKeyFile','');
INSERT INTO "settings" VALUES(8,'sessionMaxAge','60');
INSERT INTO "settings" VALUES(9,'pageSize','50');
INSERT INTO "settings" VALUES(10,'expireDiff','0');
INSERT INTO "settings" VALUES(11,'trafficDiff','0');
INSERT INTO "settings" VALUES(12,'remarkModel','-ieo');
INSERT INTO "settings" VALUES(13,'tgBotEnable','false');
INSERT INTO "settings" VALUES(14,'tgBotToken','');
INSERT INTO "settings" VALUES(15,'tgBotProxy','');
INSERT INTO "settings" VALUES(16,'tgBotChatId','');
INSERT INTO "settings" VALUES(17,'tgRunTime','@daily');
INSERT INTO "settings" VALUES(18,'tgBotBackup','false');
INSERT INTO "settings" VALUES(19,'tgBotLoginNotify','true');
INSERT INTO "settings" VALUES(20,'tgCpu','80');
INSERT INTO "settings" VALUES(21,'tgLang','en-US');
INSERT INTO "settings" VALUES(22,'timeLocation','Asia/Tehran');
INSERT INTO "settings" VALUES(23,'secretEnable','false');
INSERT INTO "settings" VALUES(24,'subEnable','false');
INSERT INTO "settings" VALUES(25,'subListen','');
INSERT INTO "settings" VALUES(26,'subPort','2096');
INSERT INTO "settings" VALUES(27,'subPath','/sub/');
INSERT INTO "settings" VALUES(28,'subDomain','');
INSERT INTO "settings" VALUES(29,'subCertFile','');
INSERT INTO "settings" VALUES(30,'subKeyFile','');
INSERT INTO "settings" VALUES(31,'subUpdates','12');
INSERT INTO "settings" VALUES(32,'subEncrypt','true');
INSERT INTO "settings" VALUES(33,'subShowInfo','true');
INSERT INTO "settings" VALUES(34,'subURI','');
INSERT INTO "settings" VALUES(35,'subJsonPath','/json/');
INSERT INTO "settings" VALUES(36,'subJsonURI','');
INSERT INTO "settings" VALUES(37,'subJsonFragment','');
INSERT INTO "settings" VALUES(38,'subJsonNoises','');
INSERT INTO "settings" VALUES(39,'subJsonMux','');
INSERT INTO "settings" VALUES(40,'subJsonRules','');
INSERT INTO "settings" VALUES(41,'datepicker','gregorian');
INSERT INTO "settings" VALUES(42,'xrayTemplateConfig','{
  "log": {
    "access": "none",
    "dnsLog": false,
    "error": "",
    "loglevel": "warning",
    "maskAddress": ""
  },
  "api": {
    "tag": "api",
    "services": [
      "HandlerService",
      "LoggerService",
      "StatsService"
    ]
  },
  "inbounds": [
    {
      "tag": "api",
      "listen": "127.0.0.1",
      "port": 62789,
      "protocol": "dokodemo-door",
      "settings": {
        "address": "127.0.0.1"
      }
    }
  ],
  "outbounds": [
    {
      "tag": "82.152.164.208",
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "UseIP",
        "redirect": "",
        "noises": []
      },
      "sendThrough": "82.152.164.208"
    },
    {
      "tag": "direct",
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "UseIP"
      }
    },
    {
      "tag": "blocked",
      "protocol": "blackhole",
      "settings": {}
    },
    {
      "tag": "82.152.164.209",
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "UseIP",
        "redirect": "",
        "noises": []
      },
      "sendThrough": "82.152.164.209"
    }
  ],
  "policy": {
    "levels": {
      "0": {
        "statsUserDownlink": true,
        "statsUserUplink": true
      }
    },
    "system": {
      "statsInboundDownlink": true,
      "statsInboundUplink": true,
      "statsOutboundDownlink": true,
      "statsOutboundUplink": true
    }
  },
  "routing": {
    "domainStrategy": "AsIs",
    "rules": [
      {
        "type": "field",
        "inboundTag": [
          "api"
        ],
        "outboundTag": "api"
      },
      {
        "type": "field",
        "outboundTag": "blocked",
        "ip": [
          "geoip:private"
        ]
      },
      {
        "type": "field",
        "outboundTag": "blocked",
        "protocol": [
          "bittorrent"
        ]
      },
      {
        "type": "field",
        "network": "TCP,UDP",
        "inboundTag": [
          "inbound-82.152.164.208:20000"
        ],
        "outboundTag": "82.152.164.208"
      },
      {
        "type": "field",
        "network": "TCP,UDP",
        "inboundTag": [
          "inbound-82.152.164.209:20001"
        ],
        "outboundTag": "82.152.164.209"
      }
    ]
  },
  "stats": {}
}');
INSERT INTO "settings" VALUES(43,'warp','{
  "access_token": "7517d4e3-5aa6-4f04-8039-75233e2c9c15",
  "device_id": "0aae0d15-3c08-4a9a-9412-6bd400ebd329",
  "license_key": "a0N56cl4-0354bZFE-31Qycv59",
  "private_key": "QJH3eiYaljpkU4p+oKukvsFr+8+WL+Yjtph6SL5FInY="
}');
DELETE FROM "sqlite_sequence";
INSERT INTO "sqlite_sequence" VALUES('users',1);
INSERT INTO "sqlite_sequence" VALUES('settings',43);
INSERT INTO "sqlite_sequence" VALUES('outbound_traffics',4);
INSERT INTO "sqlite_sequence" VALUES('inbounds',3);
INSERT INTO "sqlite_sequence" VALUES('client_traffics',3);
CREATE TABLE `users` (`id` integer PRIMARY KEY AUTOINCREMENT,`username` text,`password` text,`login_secret` text);
INSERT INTO "users" VALUES(1,'admin','admin','');
COMMIT;
EOF

cat > gendb.py <<EOF
import sqlite3

db_file = 'temp.db'
dump_file = 'temp.sql'

conn = sqlite3.connect(db_file)
cursor = conn.cursor()

with open(dump_file, 'r') as file:
    sql_script = file.read()

try:
    cursor.executescript(sql_script)
    print(f"数据库 {db_file} 生成成功。")
except sqlite3.Error as e:
    print(f"生成数据库时出错: {e}")

conn.commit()
conn.close()
EOF

python3 gendb.py
rm -f temp.sql

echo 停止正在运行的xui进程
x-ui stop
pkill xrayl
pkill xray-linux
sleep 1
echo "开始执行规则生成脚本"
python3 genroute.py
python3 genoutbound.py
python3 writetemple.py
python3 gensec.py

if [ $? -ne 0 ]; then
    echo "一个或多个脚本执行失败"
    exit 1
fi

cp temp.db /etc/x-ui/x-ui.db
cp temp.db /etc/x-ui/x-ui.bak

if [ $? -ne 0 ]; then
    echo "复制生成的规则库失败"
    exit 1
fi

x-ui start

if [ $? -ne 0 ]; then
    echo "服务启动失败"
    exit 1
fi
#clear
echo "执行清理"
rm -f genroute.py
rm -f genoutbound.py
rm -f gensec.py
rm -f temp.db
rm -f writetemple.py
rm -r route.json
rm -r rules.json
rm -r outbound.json
sleep 1
clear
cat results.log
echo "所有操作已成功完成"
echo "密码信息同时保存在脚本目录的results.log"